{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\44741\\\\Desktop\\\\projects\\\\javascript-quiz\\\\src\\\\components\\\\GameCard.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport Loading from \"./Loading\";\nimport { shuffleArray, addClassName, removeClassName } from \"../utils/utils\";\nimport { setGameStatus, setQuestionNumber, setGameScore } from \"../actions/index\";\nimport DOMPurity from \"dompurify\";\n\nconst GameCard = ({\n  questionList,\n  questionNumber,\n  setQuestionNumber,\n  setGameStatus,\n  setGameScore,\n  gameScore\n}) => {\n  let answersArray = shuffleArray([...questionList[questionNumber].incorrect_answers, questionList[questionNumber].correct_answer]);\n\n  if (questionNumber === 9) {\n    setGameStatus(\"game-over-page\");\n    setQuestionNumber(0);\n  }\n\n  const checkAnswer = e => {\n    let answerButton = e.currentTarget;\n\n    if (answerButton.value === questionList[questionNumber].correct_answer) {\n      addClassName(answerButton, \"right-answer\");\n      setGameScore(gameScore);\n      setTimeout(() => {\n        removeClassName(answerButton, \"right-answer\");\n        setQuestionNumber(questionNumber);\n      }, 2000);\n    } else {\n      addClassName(answerButton, \"wrong-answer\");\n      setTimeout(() => {\n        removeClassName(answerButton, \"wrong-answer\");\n        setQuestionNumber(questionNumber);\n      }, 2000);\n    }\n  };\n\n  if (loading === true) {\n    return /*#__PURE__*/React.createElement(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 12\n      }\n    });\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: DOMPurity.sanitize(questionList[questionNumber].question)\n      },\n      className: \"game-question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-answers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    }, answersArray.map(answer => {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        key: answer,\n        dangerouslySetInnerHTML: {\n          __html: DOMPurity.sanitize(answer)\n        },\n        value: answer,\n        onClick: e => checkAnswer(e),\n        className: \"answer-button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }\n      });\n    }))));\n  }\n};\n\nconst mapStateToProps = state => {\n  return state;\n};\n\nexport default connect(mapStateToProps, {\n  setQuestionNumber,\n  setGameStatus,\n  setGameScore\n})(GameCard);","map":{"version":3,"sources":["C:/Users/44741/Desktop/projects/javascript-quiz/src/components/GameCard.js"],"names":["React","connect","Loading","shuffleArray","addClassName","removeClassName","setGameStatus","setQuestionNumber","setGameScore","DOMPurity","GameCard","questionList","questionNumber","gameScore","answersArray","incorrect_answers","correct_answer","checkAnswer","e","answerButton","currentTarget","value","setTimeout","loading","__html","sanitize","question","map","answer","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Loading from \"./Loading\";\r\nimport { shuffleArray, addClassName, removeClassName } from \"../utils/utils\";\r\nimport {\r\n  setGameStatus,\r\n  setQuestionNumber,\r\n  setGameScore,\r\n} from \"../actions/index\";\r\nimport DOMPurity from \"dompurify\";\r\n\r\nconst GameCard = ({\r\n  questionList,\r\n  questionNumber,\r\n  setQuestionNumber,\r\n  setGameStatus,\r\n  setGameScore,\r\n  gameScore,\r\n}) => {\r\n  let answersArray = shuffleArray([\r\n    ...questionList[questionNumber].incorrect_answers,\r\n    questionList[questionNumber].correct_answer,\r\n  ]);\r\n\r\n  if (questionNumber === 9) {\r\n    setGameStatus(\"game-over-page\");\r\n    setQuestionNumber(0);\r\n  }\r\n\r\n  const checkAnswer = (e) => {\r\n    let answerButton = e.currentTarget;\r\n    if (answerButton.value === questionList[questionNumber].correct_answer) {\r\n      addClassName(answerButton, \"right-answer\");\r\n      setGameScore(gameScore);\r\n      setTimeout(() => {\r\n        removeClassName(answerButton, \"right-answer\");\r\n        setQuestionNumber(questionNumber);\r\n      }, 2000);\r\n    } else {\r\n      addClassName(answerButton, \"wrong-answer\");\r\n      setTimeout(() => {\r\n        removeClassName(answerButton, \"wrong-answer\");\r\n        setQuestionNumber(questionNumber);\r\n      }, 2000);\r\n    }\r\n  };\r\n\r\n  if (loading === true) {\r\n    return <Loading />;\r\n  } else {\r\n    return (\r\n      <div className=\"game-page\">\r\n        <div className=\"game-content\">\r\n          <div\r\n            dangerouslySetInnerHTML={{\r\n              __html: DOMPurity.sanitize(questionList[questionNumber].question),\r\n            }}\r\n            className=\"game-question\"\r\n          ></div>\r\n          <div className=\"game-answers\">\r\n            {answersArray.map((answer) => {\r\n              return (\r\n                <button\r\n                  key={answer}\r\n                  dangerouslySetInnerHTML={{\r\n                    __html: DOMPurity.sanitize(answer),\r\n                  }}\r\n                  value={answer}\r\n                  onClick={(e) => checkAnswer(e)}\r\n                  className=\"answer-button\"\r\n                ></button>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return state;\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  setQuestionNumber,\r\n  setGameStatus,\r\n  setGameScore,\r\n})(GameCard);\r\n"]},"metadata":{},"sourceType":"module"}