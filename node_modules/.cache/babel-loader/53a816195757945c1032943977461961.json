{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\44741\\\\Desktop\\\\typescript-react\\\\javascript-quiz\\\\src\\\\pages\\\\gamePage.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Loading from \"../components/Loading\";\nimport { fetchData } from \"../api/api\";\nimport { succesRate } from \"../utils/utils\";\n\nconst GamePage = () => {\n  //React Hooks\n  const [loading, setLoading] = useState(true);\n  const [questionNr, setquestionNr] = useState(0);\n  const [gameCard, setGameCard] = useState({});\n  const [correct, setCorrect] = useState(0);\n  const [incorrect, setIncorrect] = useState(0); //Set Loading to false\n\n  setTimeout(() => {\n    setLoading(false);\n  }, 3500); // Load Card\n\n  useEffect(async () => {\n    const newCard = await fetchData();\n    setGameCard(newCard);\n  }, []); //Correct Wrong answers\n\n  const correctAnswer = () => {\n    return setTimeout(() => {\n      setLoading(true);\n      setquestionNr(questionNr + 1);\n      setCorrect(correct + 1);\n    }, 2000);\n  };\n\n  const wrongAnswer = () => {\n    return setTimeout(() => {\n      setLoading(true);\n      setquestionNr(questionNr + 1);\n      setCorrect(correct + 1);\n    }, 2000);\n  }; //Check answer\n\n\n  const checkAnswer = e => {\n    if (e.currentTarget.value === gameCard[questionNr].correct_answer) {\n      e.currentTarget.classList.add(\"right-answer\");\n      correctAnswer();\n    } else {\n      e.currentTarget.classList.add(\"wrong-answer\");\n      wrongAnswer();\n    }\n  }; //Loading Screen\n\n\n  if (loading === true) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    })); //Game Over\n  } else if (questionNr + 1 === 10) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, \"game over\"));\n  } else {\n    //Game Card\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: gameCard[questionNr].question\n      },\n      className: \"game-question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-answers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }, gameCard[questionNr].answers.map(answer => {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        value: answer,\n        onClick: e => checkAnswer(e),\n        className: \"answer-button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }\n      }, answer);\n    }))));\n  }\n};\n\nexport default GamePage;","map":{"version":3,"sources":["C:/Users/44741/Desktop/typescript-react/javascript-quiz/src/pages/gamePage.js"],"names":["React","useState","useEffect","Loading","fetchData","succesRate","GamePage","loading","setLoading","questionNr","setquestionNr","gameCard","setGameCard","correct","setCorrect","incorrect","setIncorrect","setTimeout","newCard","correctAnswer","wrongAnswer","checkAnswer","e","currentTarget","value","correct_answer","classList","add","__html","question","answers","map","answer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Loading from \"../components/Loading\";\r\nimport { fetchData } from \"../api/api\";\r\nimport { succesRate } from \"../utils/utils\";\r\nconst GamePage = () => {\r\n  //React Hooks\r\n  const [loading, setLoading] = useState(true);\r\n  const [questionNr, setquestionNr] = useState(0);\r\n  const [gameCard, setGameCard] = useState({});\r\n  const [correct, setCorrect] = useState(0);\r\n  const [incorrect, setIncorrect] = useState(0);\r\n\r\n  //Set Loading to false\r\n  setTimeout(() => {\r\n    setLoading(false);\r\n  }, 3500);\r\n\r\n  // Load Card\r\n  useEffect(async () => {\r\n    const newCard = await fetchData();\r\n    setGameCard(newCard);\r\n  }, []);\r\n\r\n  //Correct Wrong answers\r\n  const correctAnswer = () => {\r\n    return setTimeout(() => {\r\n      setLoading(true);\r\n      setquestionNr(questionNr + 1);\r\n      setCorrect(correct + 1);\r\n    }, 2000);\r\n  };\r\n  const wrongAnswer = () => {\r\n    return setTimeout(() => {\r\n      setLoading(true);\r\n      setquestionNr(questionNr + 1);\r\n      setCorrect(correct + 1);\r\n    }, 2000);\r\n  };\r\n\r\n  //Check answer\r\n  const checkAnswer = (e) => {\r\n    if (e.currentTarget.value === gameCard[questionNr].correct_answer) {\r\n      e.currentTarget.classList.add(\"right-answer\");\r\n      correctAnswer();\r\n    } else {\r\n      e.currentTarget.classList.add(\"wrong-answer\");\r\n      wrongAnswer();\r\n    }\r\n  };\r\n\r\n  //Loading Screen\r\n  if (loading === true) {\r\n    return (\r\n      <div className=\"game-page\">\r\n        <Loading />\r\n      </div>\r\n    );\r\n    //Game Over\r\n  } else if (questionNr + 1 === 10) {\r\n    return (\r\n      <div className=\"game-page\">\r\n        <h1>game over</h1>\r\n      </div>\r\n    );\r\n  } else {\r\n    //Game Card\r\n    return (\r\n      <div className=\"game-page\">\r\n        <div className=\"game-content\">\r\n          <div\r\n            dangerouslySetInnerHTML={{ __html: gameCard[questionNr].question }}\r\n            className=\"game-question\"\r\n          ></div>\r\n          <div className=\"game-answers\">\r\n            {gameCard[questionNr].answers.map((answer) => {\r\n              return (\r\n                <button\r\n                  value={answer}\r\n                  onClick={(e) => checkAnswer(e)}\r\n                  className=\"answer-button\"\r\n                >\r\n                  {answer}\r\n                </button>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default GamePage;\r\n"]},"metadata":{},"sourceType":"module"}