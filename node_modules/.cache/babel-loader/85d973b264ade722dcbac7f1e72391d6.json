{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\44741\\\\Desktop\\\\projects\\\\javascript-quiz\\\\src\\\\pages\\\\gamePage.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Loading from \"../components/Loading\";\nimport { fetchData } from \"../api/api\";\nimport { succesRate } from \"../utils/utils\";\nimport GameOver from \"../components/GameOver\";\n\nconst GamePage = () => {\n  //React Hooks\n  const [loading, setLoading] = useState(true);\n  const [questionNr, setquestionNr] = useState(0);\n  const [gameCard, setGameCard] = useState({});\n  const [correct, setCorrect] = useState(0);\n  const [incorrect, setIncorrect] = useState(0); //Set Loading to false\n\n  setTimeout(() => {\n    setLoading(false);\n  }, 3500); // Load Card\n\n  useEffect(() => {\n    const getData = async () => {\n      const newCard = await fetchData();\n      setGameCard(newCard);\n    };\n\n    getData();\n  }, []); //Correct Wrong answers\n\n  const correctAnswer = () => {\n    return setTimeout(() => {\n      setquestionNr(questionNr + 1);\n      setCorrect(correct + 1);\n      setLoading(true);\n    }, 2500);\n  };\n\n  const wrongAnswer = () => {\n    return setTimeout(() => {\n      setquestionNr(questionNr + 1);\n      setIncorrect(incorrect + 1);\n      setLoading(true);\n    }, 2500);\n  }; //Check answer\n\n\n  const checkAnswer = e => {\n    if (e.currentTarget.value === gameCard[questionNr].correct_answer) {\n      e.currentTarget.classList.add(\"right-answer\");\n      correctAnswer();\n    } else {\n      e.currentTarget.classList.add(\"wrong-answer\");\n      wrongAnswer();\n    }\n  }; //Loading Screen\n\n\n  if (loading === true) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    })); //Game Over\n  } else if (questionNr + 1 === 10) {\n    /*#__PURE__*/\n    React.createElement(GameOver, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 5\n      }\n    });\n  } else {\n    //Game Card\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: gameCard[questionNr].question\n      },\n      className: \"game-question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-answers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }\n    }, gameCard[questionNr].answers.map(answer => {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        dangerouslySetInnerHTML: {\n          __html: answer\n        },\n        value: answer,\n        onClick: e => checkAnswer(e),\n        className: \"answer-button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }\n      });\n    }))));\n  }\n};\n\nexport default GamePage;","map":{"version":3,"sources":["C:/Users/44741/Desktop/projects/javascript-quiz/src/pages/gamePage.js"],"names":["React","useState","useEffect","Link","Loading","fetchData","succesRate","GameOver","GamePage","loading","setLoading","questionNr","setquestionNr","gameCard","setGameCard","correct","setCorrect","incorrect","setIncorrect","setTimeout","getData","newCard","correctAnswer","wrongAnswer","checkAnswer","e","currentTarget","value","correct_answer","classList","add","__html","question","answers","map","answer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Loading from \"../components/Loading\";\r\nimport { fetchData } from \"../api/api\";\r\nimport { succesRate } from \"../utils/utils\";\r\nimport GameOver from \"../components/GameOver\";\r\n\r\nconst GamePage = () => {\r\n  //React Hooks\r\n  const [loading, setLoading] = useState(true);\r\n  const [questionNr, setquestionNr] = useState(0);\r\n  const [gameCard, setGameCard] = useState({});\r\n  const [correct, setCorrect] = useState(0);\r\n  const [incorrect, setIncorrect] = useState(0);\r\n\r\n  //Set Loading to false\r\n  setTimeout(() => {\r\n    setLoading(false);\r\n  }, 3500);\r\n\r\n  // Load Card\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      const newCard = await fetchData();\r\n      setGameCard(newCard);\r\n    };\r\n    getData();\r\n  }, []);\r\n\r\n  //Correct Wrong answers\r\n  const correctAnswer = () => {\r\n    return setTimeout(() => {\r\n      setquestionNr(questionNr + 1);\r\n      setCorrect(correct + 1);\r\n      setLoading(true);\r\n    }, 2500);\r\n  };\r\n\r\n  const wrongAnswer = () => {\r\n    return setTimeout(() => {\r\n      setquestionNr(questionNr + 1);\r\n      setIncorrect(incorrect + 1);\r\n      setLoading(true);\r\n    }, 2500);\r\n  };\r\n\r\n  //Check answer\r\n  const checkAnswer = (e) => {\r\n    if (e.currentTarget.value === gameCard[questionNr].correct_answer) {\r\n      e.currentTarget.classList.add(\"right-answer\");\r\n      correctAnswer();\r\n    } else {\r\n      e.currentTarget.classList.add(\"wrong-answer\");\r\n      wrongAnswer();\r\n    }\r\n  };\r\n\r\n  //Loading Screen\r\n  if (loading === true) {\r\n    return (\r\n      <div className=\"game-page\">\r\n        <Loading />\r\n      </div>\r\n    );\r\n    //Game Over\r\n  } else if (questionNr + 1 === 10) {\r\n    <GameOver />;\r\n  } else {\r\n    //Game Card\r\n    return (\r\n      <div className=\"game-page\">\r\n        <div className=\"game-content\">\r\n          <div\r\n            dangerouslySetInnerHTML={{ __html: gameCard[questionNr].question }}\r\n            className=\"game-question\"\r\n          ></div>\r\n          <div className=\"game-answers\">\r\n            {gameCard[questionNr].answers.map((answer) => {\r\n              return (\r\n                <button\r\n                  dangerouslySetInnerHTML={{ __html: answer }}\r\n                  value={answer}\r\n                  onClick={(e) => checkAnswer(e)}\r\n                  className=\"answer-button\"\r\n                ></button>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default GamePage;\r\n"]},"metadata":{},"sourceType":"module"}